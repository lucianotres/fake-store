@using FakeProduct.Models
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">Sem autorização para acessar!</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Desculpe, nada localizado neste endereço.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    public required MinhasCotacoes cotacao { get; set; }

    [Inject]
    public required CascadingValueSource<MinhasCotacoes> cascCotacao { get; set; }

    protected override void OnInitialized()
    {
        cotacao.PropertyChanged += async (s, a) =>
        {
            Console.WriteLine($"Cotação alterada: {a.PropertyName}");
            await cascCotacao.NotifyChangedAsync();
        };
    }
}