@using FakeProduct.Models
@using FakeProduct.Services
@inject LocalStorageDataService localStorageService
@inject FakeStoreCartsService fakeStoreService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<tr>
    <td>
        <text>@cart.Id</text>&ensp;
        @if(idUser.HasValue && cart.UserId == idUser.Value)
        {
            <span class="badge bg-success">Meu</span>
        }
    </td>
    @if (cart.Products.Count == 0) {
        <td>Sem</td>
    }
    else {
        <td>@cart.Products.Count</td>
    }
    <td>@cart.Products.Sum(p => p.Quantity)</td>
    <td>@cart.Total.ToString("#,##0.00")</td>
    <td>@(cotacao.Cotacao == null ? "-" : cotacao.Cotacao.ConvertFromUSD(cart.Total)?.ToString("#,##0.00"))</td>
    <td class="text-nowrap">
        <button class="btn btn-primary btn-sm" @onclick="DoVer">Ver</button>
        <button class="btn btn-danger btn-sm" @onclick="DoRemover">Remover</button>
    </td>
</tr>

@code {
    [Parameter]
    public Cart cart { get; set; } = new();

    [Parameter]
    public Action? OnRemover { get; set; }

    [CascadingParameter]
    public required MinhasCotacoes cotacao { get; set; }

    private int? idUser = null;
    
    protected override async Task OnParametersSetAsync()
    {
        if (cart == null)
            return;

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        idUser = authState.GetUserId();    
    }

    private async void DoRemover()
    {
        if (cart.Id <= 0)
            return;

        if (await fakeStoreService.DeleteCartAsync(cart.Id))
            OnRemover?.Invoke();
    }

    private void DoVer()
    {
        navigationManager.NavigateTo($"/carrinho/{cart.Id}", false);
    }
}
