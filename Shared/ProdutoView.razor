@using FakeProduct.Models
@using FakeProduct.Services
@inject FakeStoreProductsService fakeStoreService;

<div class="h-100 d-flex flex-column align-items-center justify-content-center">
    <div class="row formStyle p-0">
        <div class="col-12 col-md-12 p-4">
            <EditForm Model="product" OnValidSubmit="Salvar">
                <DataAnnotationsValidator />
                <div class="mb-6">
                    <label class="form-label" for="title">Título</label>
                    <input class="form-control" type="text" id="title" placeholder="Título para o produto" @bind="product.Title" />
                    <ValidationMessage For="@(() => product.Title)" />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="price">Preço</label>
                    <input class="form-control" type="number" step="0.01" id="price" placeholder="Preço" @bind="product.Price" />
                    <ValidationMessage For="@(() => product.Price)" />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="descr">Descrição</label>
                    <input class="form-control" type="text" id="descr" placeholder="Descrição para o produto" @bind="product.Description" />
                    <ValidationMessage For="@(() => product.Description)" />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="image">Imagem</label>
                    <input class="form-control" type="url" id="image" placeholder="Imagem" @bind="product.Image" />
                    <ValidationMessage For="@(() => product.Image)" />  
                </div>

                <div class="text-end">
                    <button type="submit" class="btn btn-success">Salvar</button>
                    <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Product product { get; set; } = new();

    [Parameter]
    public Action? OnCancelar { get; set; }

    [Parameter]
    public Action<bool>? OnSalvar { get; set; }

    protected override void OnParametersSet()
    {
        if (product == null)
        {
            product = new Product() { Id = 0 };
        }
    }

    private void Cancelar()
    {
        OnCancelar?.Invoke();
    }

    private async Task Salvar()
    {
        if (product.Id == 0)
        {
            var result = await fakeStoreService.PostProductAsync(product);
            OnSalvar?.Invoke(result != null);
        }
        else
        {
            var result = await fakeStoreService.PutProductAsync(product);
            OnSalvar?.Invoke(result != null);
        }
    }


}
