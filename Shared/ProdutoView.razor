@using FakeProduct.Models
@using FakeProduct.Services
@inject FakeStoreService fakeStoreService;

<div class="box">
    <div class="field title">
        <label for="title">Título</label>
        <input type="text" id="title" placeholder="Título para o produto" @bind="product.Title" />
    </div>
    <div class="field price">
        <label for="price">Preço</label>
        <input type="number" id="price" placeholder="Preço" @bind="product.Price" />
    </div>
    <div class="field descr">
        <label for="descr">Descrição</label>
        <input type="text" id="descr" placeholder="Descrição para o produto" @bind="product.Description" />
    </div>
    <div class="field image">
        <label for="image">Imagem</label>
        <input type="url" id="image" placeholder="Imagem" @bind="product.Image" />
    </div>

    <button type="button" @onclick="Salvar">Salvar</button>
    <button type="button" @onclick="Cancelar">Cancelar</button>
</div>

@code {
    [Parameter]
    public Product product { get; set; } = new();

    [Parameter]
    public Action? OnCancelar { get; set; }

    [Parameter]
    public Action<bool>? OnSalvar { get; set; }

    protected override void OnParametersSet()
    {
        if (product == null)
        {
            product = new Product() { Id = 0 };
        }
    }

    private void Cancelar(MouseEventArgs args)
    {
        OnCancelar?.Invoke();
    }

    private async Task Salvar(MouseEventArgs args)
    {
        if (product.Id == 0)
        {
            var result = await fakeStoreService.PostProductAsync(product);
            OnSalvar?.Invoke(result != null);
        }
        else
        {
            var result = await fakeStoreService.PutProductAsync(product);
            OnSalvar?.Invoke(result != null);
        }
    }


}
