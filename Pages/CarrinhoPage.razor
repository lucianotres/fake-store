@page "/carrinho/{CarrinhoId:int}"
@using FakeProduct.Models
@using FakeProduct.Services
@inject FakeStoreCartsService fakeStoreCartsService
@inject LocalStorageDataService localStorageDataService
@inject NavigationManager navigationManager

<PageTitle>Fake Store - Carrinho @CarrinhoId</PageTitle>

<h3>Carrinho nº @CarrinhoId</h3>

@if(Carrinho == null)
{
    <p>Carregando carrinho...</p>
}
else
{
    <div>
        <button class="btn btn-success" @onclick="DoAddProduto">Adicionar Produto</button>
        <div>Data: @Carrinho?.Date?.ToString("dd/MM/yyyy")</div>
    </div>

    <div>
        <h4>Produtos</h4>
        @if(Carrinho?.Products == null || Carrinho.Products.Count == 0)
        {
            <p>Nenhum produto adicionado.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Produto</th>
                        <th>Preço</th>
                        <th>Quantidade</th>
                        <th>Total</th>
                        <th>Total Cotação</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>                    
                    @foreach (var i in Products)
                    {
                        <tr>
                            <td>@i.product?.Title</td>
                            <td>$ @i.product?.Price.ToString("#,##0.00")</td>
                            <td>
                                @if (i.cartProduct == AlteraQtde)
                                {
                                    <input type="number" @bind="i.cartProduct.Quantity" min="1" style="width: 50px;" />
                                    <button class="btn btn-sm btn-success" @onclick="() => DoAlterarQtdSalva(i.cartProduct)">Salvar</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DoAlterarQtd(i.cartProduct)">Cancela</button>
                                }
                                else
                                {            
                                    <text> @i.cartProduct.Quantity </text>
                                    <button class="btn btn-sm btn-primary" @onclick="() => DoAlterarQtd(i.cartProduct)">Alterar</button>
                                }
                            </td>
                            <td>$ @(((i.product?.Price ?? 0) * i.cartProduct.Quantity).ToString("#,##0.00"))</td>
                            <td>@cotacao?.Cotacao?.ConvertFromUSD((i.product?.Price ?? 0) * i.cartProduct.Quantity)?.ToString("#,##0.00")</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => DoRemover(i.cartProduct)">Remover</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    [Parameter]
    public int CarrinhoId { get; set; }

    [CascadingParameter]
    public required MinhasCotacoes cotacao { get; set; }

    public Cart? Carrinho { get; set; } = null;

    public IEnumerable<(CartProduct cartProduct, Product? product)> Products 
    {
        get => Carrinho?.Products
            .Select(cp =>
            {
                var product = localStorageDataService.Produtos.FirstOrDefault(p => p.Id == cp.ProductId);
                return (cp, product);
            }) ?? Enumerable.Empty<(CartProduct, Product?)>();
    }

    private CartProduct? AlteraQtde = null;
    private int AlteraQtdeOriginal = 0;

    protected override async Task OnParametersSetAsync()
    {
        await localStorageDataService.AtualizarListaProdutos();
        await CarregaCarrinho();
    }

    private async Task CarregaCarrinho()
    {
        if (CarrinhoId <= 0)
            return;

        if (!localStorageDataService.Carrinhos.Exists(w => w.Id == CarrinhoId))
        {          
            await localStorageDataService.AtualizarListaCarrinhos();
        }

        Carrinho = localStorageDataService.Carrinhos.FirstOrDefault(w => w.Id == CarrinhoId);
    }

    private void DoAlterarQtd(CartProduct cartProduct)
    {
        if (AlteraQtde == cartProduct)
        {
            cartProduct.Quantity = AlteraQtdeOriginal; //restaura a quantidade original
            AlteraQtde = null; //se já estava selecionado, desmarca
            return;
        }

        AlteraQtdeOriginal = cartProduct.Quantity;
        AlteraQtde = cartProduct;
    }

    private async void DoAlterarQtdSalva(CartProduct cartProduct)
    {
        if (Carrinho == null)
            return;

        AlteraQtde = null;
        await SalvarAlteracores();
    }

    private async void DoRemover(CartProduct cartProduct)
    {
        if (Carrinho == null)
            return;

        Carrinho.Products.Remove(cartProduct);
        await SalvarAlteracores();
    }

    private async Task SalvarAlteracores()
    {
        if (Carrinho == null)
            return;

        var result = await fakeStoreCartsService.PutCartAsync(Carrinho);
        if (result == null || result.Products.Count != Carrinho.Products.Count) //recarrega a lista se difere
        {
            await CarregaCarrinho();
        }
    }

    private void DoAddProduto()
    {
        if (Carrinho == null)
            return;

        navigationManager.NavigateTo($"/produtos?addToCart={CarrinhoId}", false);
    }
}
