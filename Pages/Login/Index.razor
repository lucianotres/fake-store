@page "/login"
@using FakeProduct.Services
@using System.ComponentModel.DataAnnotations
@inject FakeStoreLoginService fakeStoreLoginService
@inject FakeStoreUsersService fakeStoreUsersService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider

<h3>Login</h3>

<AuthorizeView>
    <Authorized>
        <p>Você já está logado!</p>
        <a href="/">Voltar para a página inicial</a>
    </Authorized>
    <NotAuthorized>
        @if(Carregando)
        {
            <p>Verificando...</p>
        }
        else
        {
            <EditForm Model="Model" Context="formContext" class="form login" OnValidSubmit="DoLogin">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label" for="username">Usuário</label>
                    <input class="form-control" id="username" type="text" @bind="Model.Username" placeholder="Digite seu usuário" />
                    <ValidationMessage For="@(() => Model.Username)" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Senha</label>
                    <input class="form-control" id="password" type="password" @bind="Model.Password" placeholder="Digite sua senha" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <button class="btn btn-primary" type="submit">Submit</button>
            </EditForm>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool Carregando { get; private set; } = false;
    public LoginModel Model { get; private set; } = new();

    [Parameter]
    public string? ReturnPath { get; set; } = null;

    private async void DoLogin()
    {
        if (Carregando)
            return;

        Carregando = true;
        StateHasChanged();
        try
        {
            var token = await fakeStoreLoginService.FazerLogin(Model.Username, Model.Password);

            if (token == null)
            {
                return;
            }

            await ((FakeStoreAuthenticationStateProvider)authProvider).SetUserAuthenticated(token);
            Navigation.NavigateTo(ReturnPath ?? "/");
        }
        finally
        {
            Carregando = false;
            StateHasChanged();
        }
    }

    public class LoginModel 
    {
        [Required(ErrorMessage = "Usuário não informado!")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Senha não informada!")]
        public string Password { get; set; } = string.Empty;
    }
}
