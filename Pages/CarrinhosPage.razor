@page "/carrinhos"
@attribute [Authorize]
@using FakeProduct.Models
@using FakeProduct.Services
@using Microsoft.AspNetCore.Authorization
@inject FakeStoreCartsService fakeStoreService
@inject LocalStorageDataService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime
@inject NavigationManager navigation

<PageTitle>Fake Store - Carrinhos de Compras</PageTitle>

<h1>Carrinhos de Compras</h1>
<p>Lista de carrinhos cadastrados no sistema</p>

<button class="btn btn-success" @onclick="() => ListarCarrinhos()">Atualizar Lista</button>
<button class="btn btn-primary" @onclick="DoNovoCarrinho">Novo Carrinho</button>

<table class="table">
    <thead>
        <tr>
            <th>Nº</th>
            <th>Produtos</th>
            <th>Quantidades</th>
            <th>Valor Total (USD$)</th>
            <th>Valor Total (@(cotacao.Cotacao == null ? " - " : $"{cotacao.Cotacao?.codein}$"))</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (carregando)
        {
            <tr>
                <td colspan="5">Carregando compras...</td>
            </tr>
        }
        else
            @foreach (var c in Carrinhos)
            {
                <CartListView cart="c" OnRemover="() => { Carrinhos.Remove(c); StateHasChanged(); }" />
            }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-end">
                TOTAL:
            </td>
            <td>@TotalOriginal.ToString("#,##0.00")</td>
            <td>@(TotalCotacao.HasValue ? TotalCotacao?.ToString("#,##0.00") : "-")</td>
            <td></td>
        </tr>
    </tfoot>
</table>

@code {
    private IList<Cart> Carrinhos { get => localStorageService.Carrinhos ?? new (); }
    private bool carregando = false;

    [CascadingParameter]
    public required MinhasCotacoes cotacao { get; set; }

    public decimal TotalOriginal { get => Carrinhos.Sum(c => c.Total); }
    public decimal? TotalCotacao { get => Carrinhos.Sum(c => cotacao.Cotacao?.ConvertFromUSD(c.Total)); }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && (localStorageService.Carrinhos.Count == 0 || localStorageService.Produtos.Count == 0))
            ListarCarrinhos();
    }

    private async void ListarCarrinhos()
    {
        try
        {
            carregando = true;
            StateHasChanged();

            await localStorageService.AtualizarListaProdutos();
            await localStorageService.AtualizarListaCarrinhos();
        }
        finally
        {
            carregando = false;
            StateHasChanged();
        }
    }

    private async void DoNovoCarrinho()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.GetUserId();

        var novoCarrinho = new Cart
        {
            UserId = userId.GetValueOrDefault(),
            Date = DateTime.Now,
            Products = new List<CartProduct>()
        };

        var confirmaNovo = await fakeStoreService.PostCartAsync(novoCarrinho);

        if (confirmaNovo == null)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Erro ao criar novo carrinho. Tente novamente.");
            return;
        }

        localStorageService.Carrinhos.Add(confirmaNovo);
        navigation.NavigateTo($"/carrinho/{confirmaNovo.Id}", false);
    }
}
