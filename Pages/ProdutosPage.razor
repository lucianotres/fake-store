@page "/produtos"
@attribute [Authorize]
@using FakeProduct.Models
@using FakeProduct.Services
@using Microsoft.AspNetCore.Authorization
@inject FakeStoreProductsService fakeStoreService
@inject FakeStoreCartsService cartsServices
@inject IJSRuntime jsRuntime

@if (AddToCart.HasValue)
{
    <PageTitle>Lista de Produtos</PageTitle>
    <h1>Lista de Produtos</h1>
}
else
{
    <PageTitle>Cadastro de Produtos</PageTitle>
    <h1>Cadastro de Produtos</h1>

    <button class="btn btn-success" @onclick="ListarProdutos">Atualizar Lista</button>
    <button class="btn btn-primary" @onclick="AdicionarProduto">Novo Produto</button>
}

@if (verProduto)
{
    <ProdutoView product="selecionadoProduto"
                 OnCancelar="() => { verProduto = false; StateHasChanged(); }"
                 OnSalvar="ok => { verProduto = false; StateHasChanged(); }" />
}

@if (carregando)
{
    <p>Carregando produtos...</p>
}

@foreach (var p in Products)
{
    @if(AddToCart.HasValue)
    {
        <ProdutoListView product="p" @key="p.Id"
            OnSelecionar="() => AdicionarAoCarrinho(p)"/>
    }
    else
    {
        <ProdutoListView product="p" @key="p.Id"
            OnEditar="() => { selecionadoProduto = p; verProduto = true; StateHasChanged(); }"
            OnExcluir="() => ExcluirProduto(p)" />
    }
}


@code {
    private List<Product> Products = new();
    private bool verProduto = false;
    private Product? selecionadoProduto = null;
    private bool carregando = false;

    [SupplyParameterFromQuery]
    public int? AddToCart { get; set; } = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ListarProdutos();
    }

    private async void ListarProdutos()
    {
        try
        {
            carregando = true;
            StateHasChanged();

            Products = await fakeStoreService.GetProductsAsync();
        }
        finally
        { 
            carregando = false; 
            StateHasChanged(); 
        }
    }

    private void AdicionarProduto(MouseEventArgs args)
    {
        selecionadoProduto = null;
        verProduto = !verProduto;
    }

    private async void ExcluirProduto(Product product)
    {
        var ok = await fakeStoreService.DeleteProductAsync(product.Id);

        if (ok)
        {
            Products.Remove(product);
            StateHasChanged();
        }
    }

    private async void AdicionarAoCarrinho(Product product)
    {
        if (AddToCart == null || product == null)
            return;

        var cart = await cartsServices.GetCartAsync(AddToCart.Value);
        if (cart == null)
            return;

        //só adiciona se ainda não tem
        var cartProduct = cart.Products.FirstOrDefault(w => w.ProductId == product.Id);
        if (cartProduct == null)
        {
            cartProduct = new CartProduct
            {
                ProductId = product.Id,
                Quantity = 1
            };
            cart.Products.Add(cartProduct);
        }
        else
            cartProduct.Quantity++;

        var updatedCart = await cartsServices.PutCartAsync(cart);
        if (updatedCart != null)
            await jsRuntime.InvokeVoidAsync("history.back");
    }
}